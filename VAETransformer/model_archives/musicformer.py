# -*- coding: utf-8 -*-
"""Musicformer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iMHM-rMgDt2SAlnTHn8ug1liDE_QCIF4
"""

import os

DOWNLOAD_RAW = False

#*first, last = chunks
#  procs = [get_chunk_id(chunk, id=n) for n, chunk in enumerate(first)]
#  for proc in tqdm(procs):
#    proc.wait()
#  get_chunk_id(last).wait()
#l = [get_chunk_id([i * n for i in range(100)], id=n) for n in range(10)]
#for _l in tqdm(l):
#  _l.wait()

"""!rm -rf /usr/local/lib/python2.7
!rm -rf /usr/local/lib/R
!rm -rf /usr/local/lib/python3.10/dist-packages/torch
!rm -rf /usr/local/lib/python3.8/dist-packages/torch
!rm -rf /opt/nvidia
!rm -rf /usr/local/lib/python3.10/dist-packages/spacy
!rm -rf /usr/local/lib/python3.8/dist-packages/spacy
!rm -rf /usr/local/lib/python3.10/dist-packages/pystan
!rm -rf /usr/local/lib/python3.8/dist-packages/pystan
!rm -rf /usr/local/cuda-11.8
!rm -rf /usr/local/cuda-11"""

import time
from glob import glob
from pickle import load
from contextlib import nullcontext
from functools import partial
from random import sample
import subprocess

import numpy as np
from sklearn.model_selection import train_test_split
from tqdm import tqdm
import tensorflow as tf

print(tf.__version__)

TPU = False

SAVE_MEMORY = True
BENCHMARK = False
LOAD_TF_RECORDS = True
CONVERT_TO_TFRECORDS = False
TEST_PROP = .2
MAX_TOKENS = MAX_LEN = 1291
BUFFER_SIZE = 5000
BATCH_SIZE = 4
num_layers = 4
d_model = 64 #N_MELS
dff = 216
num_heads = 8
dropout_rate = 0.1

dataset_output_signature = (
    (
        tf.TensorSpec(shape=(MAX_LEN - 1, d_model), dtype=tf.float32),
        tf.TensorSpec(shape=(MAX_LEN, d_model), dtype=tf.float32),
    ),
    tf.TensorSpec(shape=(MAX_LEN, d_model), dtype=tf.float32)
)

generator_output_signature = tf.TensorSpec(shape=(MAX_LEN - 1, d_model), dtype=tf.float32)

def prepare_batch(dat):
    context = dat[:, 1:-1]#.to_tensor()

    inputs = dat[:, :-1]#.to_tensor()  # Drop the [END] tokens
    labels = dat[:, 1:]#.to_tensor()   # Drop the [START] tokens

    return (context, inputs), labels

def load_file(file):
  with open(file, "rb") as doc:
    d = load(doc)
  return d

def gen(files, use_tqdm=False):
  for file in (tqdm(files) if use_tqdm else files):
    yield tf.convert_to_tensor(load_file(file), dtype=tf.float32)

def make_batches(dat):
  return (
      tf.data.Dataset.from_tensor_slices(dat)
      .shuffle(BUFFER_SIZE)
      .batch(BATCH_SIZE)
      .map(prepare_batch, tf.data.AUTOTUNE)
      .prefetch(buffer_size=tf.data.AUTOTUNE)
  )

def make_file_batches(fdat):
  return (
      tf.data.Dataset.from_generator(partial(gen, fdat), output_signature=generator_output_signature)
      .shuffle(BUFFER_SIZE)
      .batch(BATCH_SIZE)
      .map(prepare_batch, tf.data.AUTOTUNE)
      .prefetch(buffer_size=tf.data.AUTOTUNE)
  )

def make_convert_batches(fdat):
  return (
      tf.data.Dataset.from_generator(partial(gen, fdat), output_signature=generator_output_signature)
      .shuffle(BUFFER_SIZE)
      .map(prepare_batch, tf.data.AUTOTUNE)
      .prefetch(buffer_size=tf.data.AUTOTUNE)
  )

def make_adapt_ds(fdat):
  return (
      tf.data.Dataset.from_generator(partial(gen, fdat, use_tqdm=True), output_signature=generator_output_signature)
      .batch(BATCH_SIZE)
      .prefetch(buffer_size=tf.data.AUTOTUNE)
  )

tfrecords_dir = "./tfrecords"
num_samples = 300

if not os.path.exists(tfrecords_dir):
    os.makedirs(tfrecords_dir)  # creating TFRecords output folder

def serialize_array(array):
  array = tf.io.serialize_tensor(array)
  return array

def _bytes_feature(value):
    """Returns a bytes_list from a string / byte."""
    if isinstance(value, type(tf.constant(0))): # if value ist tensor
        value = value.numpy() # get value of tensor
    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))

def _parse_tfr_element(element):
  parse_dic = {
    'pt': tf.io.FixedLenFeature([], tf.string), # Note that it is tf.string, not tf.float32
  }
  example_message = tf.io.parse_single_example(element, parse_dic)

  _pt = tf.io.parse_tensor(example_message['pt'], out_type=tf.float32) # get byte string
  _en = tf.concat([tf.zeros_like(_pt[:1]), _pt], axis=0)
  _enl = tf.concat([_pt, tf.zeros_like(_pt[:1])], axis=0)

  _pt.set_shape([MAX_LEN - 1, d_model])
  _en.set_shape([MAX_LEN, d_model])
  _enl.set_shape([MAX_LEN, d_model])
  #feature = tf.io.parse_tensor(_pt, out_type=tf.float32) # restore 2D array from byte string
  #feature = tf.io.parse_tensor(b_feature, out_type=tf.float32) # restore 2D array from byte string
  return (_pt, _en), _enl

files = glob("./tfrecords/*.tfrec" if LOAD_TF_RECORDS else "./spectrograms/mel_*.pkl")
train_files, test_files = train_test_split(files, test_size=TEST_PROP)

spe = None
val_batches = None
adapt_ds = None
if LOAD_TF_RECORDS:
  train_batches = (tf.data.TFRecordDataset(train_files, num_parallel_reads=tf.data.AUTOTUNE)
                  .map(_parse_tfr_element, num_parallel_calls=tf.data.AUTOTUNE)
                  .shuffle(BUFFER_SIZE)
                  .batch(BATCH_SIZE)
                  .prefetch(tf.data.AUTOTUNE))
  val_batches = (tf.data.TFRecordDataset(test_files, num_parallel_reads=tf.data.AUTOTUNE)
                  .map(_parse_tfr_element, num_parallel_calls=tf.data.AUTOTUNE)
                  .shuffle(BUFFER_SIZE)
                  .batch(BATCH_SIZE)
                  .prefetch(tf.data.AUTOTUNE))
  adapt_ds = (tf.data.TFRecordDataset(train_files, num_parallel_reads=tf.data.AUTOTUNE)
                  .map(_parse_tfr_element, num_parallel_calls=tf.data.AUTOTUNE)
                  .map(lambda x, _: x[0])
                  .shuffle(BUFFER_SIZE)
                  .batch(BATCH_SIZE)
                  .prefetch(tf.data.AUTOTUNE))
  #print(train_batches.element_spec, val_batches.element_spec)
  #train_batches.element_spec = dataset_output_signature
  #val_batches.element_spec = dataset_output_signature
else:
  train_batches = make_file_batches(train_files) if SAVE_MEMORY else make_batches(train)
  val_batches = make_file_batches(test_files) if SAVE_MEMORY else make_batches(test)
  adapt_ds = make_adapt_ds(train_files)
  spe = len(train_files) // BATCH_SIZE

pt = None
en = None
for (pt, en), _ in train_batches.take(1):
  break

def positional_encoding(length, depth):
  depth = depth/2

  positions = np.arange(length)[:, np.newaxis]     # (seq, 1)
  depths = np.arange(depth)[np.newaxis, :]/depth   # (1, depth)

  angle_rates = 1 / (10000**depths)         # (1, depth)
  angle_rads = positions * angle_rates      # (pos, depth)

  pos_encoding = np.concatenate(
      [np.sin(angle_rads), np.cos(angle_rads)],
      axis=-1)

  return tf.cast(pos_encoding, dtype=tf.float32)

class PositionalEmbedding(tf.keras.layers.Layer):
  def __init__(self, vocab_size, d_model):
    super().__init__()
    self.d_model = d_model
    self.embedding = tf.keras.layers.Embedding(vocab_size, d_model, mask_zero=True)
    self.pos_encoding = positional_encoding(length=MAX_LEN, depth=d_model)

  def compute_mask(self, *args, **kwargs):
    return self.embedding.compute_mask(*args, **kwargs)

  def call(self, x):
    length = tf.shape(x)[1]
    x = self.embedding(x)
    # This factor sets the relative scale of the embedding and positonal_encoding.
    x *= tf.math.sqrt(tf.cast(self.d_model, tf.float32))
    x = x + self.pos_encoding[tf.newaxis, :length, :]
    return x

class PositionalLinear(tf.keras.layers.Layer):
  def __init__(self, d_model):
    super().__init__()
    self.d_model = d_model
    self.embedding = tf.keras.layers.Dense(d_model)#MASK ZERO?
    self.pos_encoding = positional_encoding(length=MAX_LEN, depth=d_model)

  def compute_mask(self, *args, **kwargs):
    return self.embedding.compute_mask(*args, **kwargs)

  def call(self, x):
    length = tf.shape(x)[1]
    x = self.embedding(x)
    # This factor sets the relative scale of the embedding and positonal_encoding.
    x *= tf.math.sqrt(tf.cast(self.d_model, tf.float32))
    x = x + self.pos_encoding[tf.newaxis, :length, :]
    return x

class BaseAttention(tf.keras.layers.Layer):
  def __init__(self, **kwargs):
    super().__init__()
    self.mha = tf.keras.layers.MultiHeadAttention(**kwargs)
    self.layernorm = tf.keras.layers.LayerNormalization()
    self.add = tf.keras.layers.Add()

class CrossAttention(BaseAttention):
  def call(self, x, context):
    attn_output, attn_scores = self.mha(
        query=x,
        key=context,
        value=context,
        return_attention_scores=True)

    # Cache the attention scores for plotting later.
    self.last_attn_scores = attn_scores

    x = self.add([x, attn_output])
    x = self.layernorm(x)

    return x

class GlobalSelfAttention(BaseAttention):
  def call(self, x):
    attn_output = self.mha(
        query=x,
        value=x,
        key=x)
    x = self.add([x, attn_output])
    x = self.layernorm(x)
    return x

class CausalSelfAttention(BaseAttention):
  def call(self, x):
    attn_output = self.mha(
        query=x,
        value=x,
        key=x,
        use_causal_mask = True)
    x = self.add([x, attn_output])
    x = self.layernorm(x)
    return x

class FeedForward(tf.keras.layers.Layer):
  def __init__(self, d_model, dff, dropout_rate=0.1):
    super().__init__()
    self.seq = tf.keras.Sequential([
      tf.keras.layers.Dense(dff, activation='relu'),
      tf.keras.layers.Dense(d_model),
      tf.keras.layers.Dropout(dropout_rate)
    ])
    self.add = tf.keras.layers.Add()
    self.layer_norm = tf.keras.layers.LayerNormalization()

  def call(self, x):
    x = self.add([x, self.seq(x)])
    x = self.layer_norm(x)
    return x

class EncoderLayer(tf.keras.layers.Layer):
  def __init__(self,*, d_model, num_heads, dff, dropout_rate=0.1):
    super().__init__()

    self.self_attention = GlobalSelfAttention(
        num_heads=num_heads,
        key_dim=d_model,
        dropout=dropout_rate)

    self.ffn = FeedForward(d_model, dff)

  def call(self, x):
    x = self.self_attention(x)
    x = self.ffn(x)
    return x

class Encoder(tf.keras.layers.Layer):
  def __init__(self, *, num_layers, d_model, num_heads,
               dff, vocab_size, dropout_rate=0.1):
    super().__init__()

    self.d_model = d_model
    self.num_layers = num_layers

    if vocab_size is not None:
      print("a value was specified for the encoder's vocab_size, but this variable is unused, so the value will have no effect")

    self.pos_embedding = PositionalLinear(d_model)#PositionalEmbedding(vocab_size=vocab_size, d_model=d_model)

    self.enc_layers = [
        EncoderLayer(d_model=d_model,
                     num_heads=num_heads,
                     dff=dff,
                     dropout_rate=dropout_rate)
        for _ in range(num_layers)]
    self.dropout = tf.keras.layers.Dropout(dropout_rate)

  def call(self, x):
    # `x` is token-IDs shape: (batch, seq_len)
    x = self.pos_embedding(x)  # Shape `(batch_size, seq_len, d_model)`.

    # Add dropout.
    x = self.dropout(x)

    for i in range(self.num_layers):
      x = self.enc_layers[i](x)

    return x  # Shape `(batch_size, seq_len, d_model)`.

class DecoderLayer(tf.keras.layers.Layer):
  def __init__(self,
               *,
               d_model,
               num_heads,
               dff,
               dropout_rate=0.1):
    super(DecoderLayer, self).__init__()

    self.causal_self_attention = CausalSelfAttention(
        num_heads=num_heads,
        key_dim=d_model,
        dropout=dropout_rate)

    self.cross_attention = CrossAttention(
        num_heads=num_heads,
        key_dim=d_model,
        dropout=dropout_rate)

    self.ffn = FeedForward(d_model, dff)

  def call(self, x, context):
    x = self.causal_self_attention(x=x)
    x = self.cross_attention(x=x, context=context)

    # Cache the last attention scores for plotting later
    self.last_attn_scores = self.cross_attention.last_attn_scores

    x = self.ffn(x)  # Shape `(batch_size, seq_len, d_model)`.
    return x

class Decoder(tf.keras.layers.Layer):
  def __init__(self, *, num_layers, d_model, num_heads, dff, vocab_size,
               dropout_rate=0.1):
    super(Decoder, self).__init__()

    self.d_model = d_model
    self.num_layers = num_layers

    self.pos_embedding = PositionalLinear(d_model)
    self.dropout = tf.keras.layers.Dropout(dropout_rate)
    self.dec_layers = [
        DecoderLayer(d_model=d_model, num_heads=num_heads,
                     dff=dff, dropout_rate=dropout_rate)
        for _ in range(num_layers)]

    self.last_attn_scores = None

  def call(self, x, context):
    # `x` is token-IDs shape (batch, target_seq_len)
    x = self.pos_embedding(x)  # (batch_size, target_seq_len, d_model)

    x = self.dropout(x)

    for i in range(self.num_layers):
      x  = self.dec_layers[i](x, context)

    self.last_attn_scores = self.dec_layers[-1].last_attn_scores

    # The shape of x is (batch_size, target_seq_len, d_model).
    return x

class Transformer(tf.keras.Model):
  def __init__(self, *, num_layers, d_model, num_heads, dff,
               input_vocab_size, target_vocab_size, dropout_rate=0.1):
    super().__init__()
    self.normalization_layer = tf.keras.layers.Normalization(axis=-1)
    self.encoder = Encoder(num_layers=num_layers, d_model=d_model,
                           num_heads=num_heads, dff=dff,
                           vocab_size=input_vocab_size,
                           dropout_rate=dropout_rate)

    self.decoder = Decoder(num_layers=num_layers, d_model=d_model,
                           num_heads=num_heads, dff=dff,
                           vocab_size=target_vocab_size,
                           dropout_rate=dropout_rate)

    self.final_layer = tf.keras.layers.Dense(target_vocab_size)
    self.denormalization_layer = tf.keras.layers.Normalization(axis=-1, invert=True)

  def adapt(self, ds=None, mean=None, variance=None):
    if ds is not None:
        self.normalization_layer.adapt(ds)
        del self.denormalization_layer
        self.denormalization_layer = tf.keras.layers.Normalization(axis=-1, invert=True, mean=self.normalization_layer.mean, variance=self.normalization_layer.variance)
    else:
        del self.normalization_layer
        del self.denormalization_layer
        self.normalization_layer = tf.keras.layers.Normalization(axis=-1, mean=mean, variance=variance)
        self.denormalization_layer = tf.keras.layers.Normalization(axis=-1, mean=mean, variance=variance, invert=True)

  def call(self, inputs):
    # To use a Keras model with `.fit` you must pass all your inputs in the
    # first argument.
    context, x  = inputs
    context = self.normalization_layer(context)
    x = self.normalization_layer(x)

    context = self.encoder(context)  # (batch_size, context_len, d_model)

    x = self.decoder(x, context)  # (batch_size, target_len, d_model)

    # Final linear layer output.
    logits = self.final_layer(x)  # (batch_size, target_len, target_vocab_size)

    logits = self.denormalization_layer(logits)

    try:
      # Drop the keras mask, so it doesn't scale the losses/metrics.
      # b/250038731
      del logits._keras_mask
    except AttributeError:
      pass

    # Return the final output and the attention weights.
    return logits

class CustomSchedule(tf.keras.optimizers.schedules.LearningRateSchedule):
  def __init__(self, d_model, warmup_steps=4000):
    super().__init__()

    self.d_model = d_model
    self.d_model = tf.cast(self.d_model, tf.float32)

    self.warmup_steps = warmup_steps

  def __call__(self, step):
    step = tf.cast(step, dtype=tf.float32)
    arg1 = tf.math.rsqrt(step)
    arg2 = step * (self.warmup_steps ** -1.5)

    return tf.math.rsqrt(self.d_model) * tf.math.minimum(arg1, arg2)

def masked_loss(label, pred):
  mask = label != 0
  loss_object = tf.keras.losses.SparseCategoricalCrossentropy(
    from_logits=True, reduction='none')
  loss = loss_object(label, pred)

  mask = tf.cast(mask, dtype=loss.dtype)
  loss *= mask

  loss = tf.reduce_sum(loss)/tf.reduce_sum(mask)
  return loss

def masked_accuracy(label, pred):
  pred = tf.argmax(pred, axis=2)
  label = tf.cast(label, pred.dtype)
  match = label == pred

  mask = label != 0

  match = match & mask

  match = tf.cast(match, dtype=tf.float32)
  mask = tf.cast(mask, dtype=tf.float32)
  return tf.reduce_sum(match)/tf.reduce_sum(mask)

with tf.device("/gpu:0"):
  transformer = Transformer(
      num_layers=num_layers,
      d_model=d_model,
      num_heads=num_heads,
      dff=dff,
      input_vocab_size=d_model,
      target_vocab_size=d_model,
      dropout_rate=dropout_rate)

  transformer.adapt(adapt_ds)
  del adapt_ds
  transformer((pt, en))

  print(transformer.summary())

  learning_rate = CustomSchedule(d_model)

  optimizer = tf.keras.optimizers.Adam(learning_rate, beta_1=0.9, beta_2=0.98, epsilon=1e-9)

  transformer.compile(
      loss='mse',
      optimizer=optimizer,
      metrics=['acc']
  )

  transformer.fit(train_batches, epochs=100, validation_data=val_batches, steps_per_epoch=spe)